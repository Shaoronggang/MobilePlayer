package com.atguigu.mobileplayer.Utils;

import com.atguigu.mobileplayer.domain.Lyric;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;

/**
 * 作者：杨光福 on 2016/4/26 10:36
 * 微信：yangguangfu520
 * QQ号：541433511
 * 作用：歌词解析工具类
 */
public class LyricUtils {

    private ArrayList<Lyric> lyrics;

    public ArrayList<Lyric> getLyrics() {
        return lyrics;
    }

    public void readLyricFile(File file){

        if(file==null||!file.exists()){
            //歌词文件不存在
            lyrics = null;
        }else{
            //歌词文件存在
            lyrics = new ArrayList<>();

            try {
                //1.一行一行的解析，把歌词放入集合中
                BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file),"GBK"));
                String line ;
                while ((line=reader.readLine()) != null){
                    line = anayLyric(line);
                }

            } catch (IOException e) {
                e.printStackTrace();
            }

            //2.集合把歌词排序

            //3.计算每句歌词的高亮显示时间-sleepTime


        }
    }

    /**
     * 解析歌词
     * @param line [02:04.12][03:37.32][00:59.73]我在这里欢笑
     * @return
     */
    private String anayLyric(String line) {
        int pos1 = line.indexOf("[");//0，不存在返回-1
        int pos2 = line.indexOf("]");//9，不存在返回-1

        if(pos1 ==0 && pos2 != -1){//至少有一句歌词

            long[] timeLongs = new long[getCont(line)];//装时间戳
            String strTime = line.substring(pos1+1,pos2);//02:04.12
            timeLongs[0] = string2Long(strTime);//把02:04.12转换成-->long类型

            String content = line;//[02:04.12][03:37.32][00:59.73]我在这里欢笑
            int i = 1;//2//3
            while (pos1 ==0 && pos2 != -1){
                content = content.substring(pos2 + 1);//[03:37.32][00:59.73]我在这里欢笑-->[00:59.73]我在这里欢笑-->我在这里欢笑
                pos1 = content.indexOf("[");//0//-1
                pos2 =content.indexOf("]");//9//-1
                if(pos2 != -1){
                    strTime = line.substring(pos1 + 1, pos2);//03:37.32-->00:59.73
                    timeLongs[i] = string2Long(strTime);
                    if(timeLongs[i]==-1){
                        return  "";
                    }

                    i++;
                }

            }

            //把这些解析好的加入到时间戳和歌词对应起来，并且生成一句歌词，加入到歌词列表中
            Lyric lyric = new Lyric();
            for(int j=0;j<timeLongs.length;j++){

                if(timeLongs[j] != 0){
                    lyric.setContent(content);//设置歌词内容
                    lyric.setTimePoint(timeLongs[j]);//设置时间戳
                    lyrics.add(lyric);
                    lyric = new Lyric();

                    //sleepTime 还没有设置

                }


            }

            return  content;
        }

        return "";
    }

    /**
     * 把把02:04.12转换成-->long类型
     * @param line 02:04.12
     * @return
     */
    private long string2Long(String line) {
        long result = -1;
        try {
            //1.把02:04.12按照 “：”切割成 02和04.12
            String[] s1 = line.split(":");//
            //2.把04.12按照“.”切割成04和12
            String [] s2 = s1[1].split("\\.");

            //分
            long min = Long.parseLong(s1[0]);//2

            //秒
            long second = Long.parseLong(s2[0]);

            //毫秒
            long mil = Long.parseLong(s2[1]);

            result = min*60*1000 + second* 1000+ mil*10;
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return result;
    }

    /**
     *  判断有多少句歌词
     * @param line [02:04.12][03:37.32][00:59.73]我在这里欢笑
     * @return
     */
    private int getCont(String line) {
        int result = 0;
        String [] left = line.split("\\[");
        String [] right = line.split("\\]");
        if(left.length==0&&right.length==0){
            result =1;
        }else if(left.length > right.length){
            result = left.length;
        }else {
            result = right.length;
        }
        return result;
    }
}

package com.atguigu.mobileplayer.Utils;

import com.atguigu.mobileplayer.domain.Lyric;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

/**
 * 作者：杨光福 on 2016/4/26 10:36
 * 微信：yangguangfu520
 * QQ号：541433511
 * 作用：歌词解析工具类
 */
public class LyricUtils {

    private ArrayList<Lyric> lyrics;


    private boolean isExistsLyric = false;

    /**
     * 判断是否存在歌词
     * @return
     */
    public boolean isExistsLyric() {
        return isExistsLyric;
    }

    public ArrayList<Lyric> getLyrics() {
        return lyrics;
    }

    public void readLyricFile(File file) {

        if (file == null || !file.exists()) {
            //歌词文件不存在
            lyrics = null;
            isExistsLyric = false;
        } else {
            //歌词文件存在
            lyrics = new ArrayList<>();
            isExistsLyric = true;

            try {
                //1.一行一行的解析，把歌词放入集合中
                BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), getCharset(file)));
                String line;
                while ((line = reader.readLine()) != null) {
                    line = anayLyric(line);
                }

            } catch (IOException e) {
                e.printStackTrace();
            }

            //2.集合把歌词排序
            Collections.sort(lyrics, new Sort());

            //3.计算每句歌词的高亮显示时间-sleepTime
            for (int i = 0; i < lyrics.size(); i++) {
                Lyric oneLyric = lyrics.get(i);//第一句歌词

                if (i + 1 < lyrics.size()) {
                    Lyric twoLyric = lyrics.get(i + 1);//第二句歌词
                    oneLyric.setSleepTime(twoLyric.getTimePoint() - oneLyric.getTimePoint());
                }


            }


        }
    }

    /**
     * 判断文件编码
     * @param file 文件
     * @return 编码：GBK,UTF-8,UTF-16LE
     */
    public String getCharset(File file) {
        String charset = "GBK";
        byte[] first3Bytes = new byte[3];
        try {
            boolean checked = false;
            BufferedInputStream bis = new BufferedInputStream(
                    new FileInputStream(file));
            bis.mark(0);
            int read = bis.read(first3Bytes, 0, 3);
            if (read == -1)
                return charset;
            if (first3Bytes[0] == (byte) 0xFF && first3Bytes[1] == (byte) 0xFE) {
                charset = "UTF-16LE";
                checked = true;
            } else if (first3Bytes[0] == (byte) 0xFE
                    && first3Bytes[1] == (byte) 0xFF) {
                charset = "UTF-16BE";
                checked = true;
            } else if (first3Bytes[0] == (byte) 0xEF
                    && first3Bytes[1] == (byte) 0xBB
                    && first3Bytes[2] == (byte) 0xBF) {
                charset = "UTF-8";
                checked = true;
            }
            bis.reset();
            if (!checked) {
                int loc = 0;
                while ((read = bis.read()) != -1) {
                    loc++;
                    if (read >= 0xF0)
                        break;
                    if (0x80 <= read && read <= 0xBF)
                        break;
                    if (0xC0 <= read && read <= 0xDF) {
                        read = bis.read();
                        if (0x80 <= read && read <= 0xBF)
                            continue;
                        else
                            break;
                    } else if (0xE0 <= read && read <= 0xEF) {
                        read = bis.read();
                        if (0x80 <= read && read <= 0xBF) {
                            read = bis.read();
                            if (0x80 <= read && read <= 0xBF) {
                                charset = "UTF-8";
                                break;
                            } else
                                break;
                        } else
                            break;
                    }
                }
            }
            bis.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return charset;
    }

    class Sort implements Comparator<Lyric> {

        @Override
        public int compare(Lyric lhs, Lyric rhs) {
            if (lhs.getTimePoint() < rhs.getTimePoint()) {
                return -1;
            } else if (lhs.getTimePoint() > rhs.getTimePoint()) {
                return 1;
            } else {
                return 0;
            }

        }
    }

    /**
     * 解析歌词
     *
     * @param line [02:04.12][03:37.32][00:59.73]我在这里欢笑
     * @return
     */
    private String anayLyric(String line) {
        int pos1 = line.indexOf("[");//0，不存在返回-1
        int pos2 = line.indexOf("]");//9，不存在返回-1

        if (pos1 == 0 && pos2 != -1) {//至少有一句歌词

            long[] timeLongs = new long[getCont(line)];//装时间戳
            String strTime = line.substring(pos1 + 1, pos2);//02:04.12
            timeLongs[0] = string2Long(strTime);//把02:04.12转换成-->long类型

            String content = line;//[02:04.12][03:37.32][00:59.73]我在这里欢笑
            int i = 1;//2//3
            while (pos1 == 0 && pos2 != -1) {
                content = content.substring(pos2 + 1);//[03:37.32][00:59.73]我在这里欢笑-->[00:59.73]我在这里欢笑-->我在这里欢笑
                pos1 = content.indexOf("[");//0//-1
                pos2 = content.indexOf("]");//9//-1
                if (pos2 != -1) {
                    strTime = line.substring(pos1 + 1, pos2);//03:37.32-->00:59.73
                    timeLongs[i] = string2Long(strTime);
                    if (timeLongs[i] == -1) {
                        return "";
                    }

                    i++;
                }

            }

            //把这些解析好的加入到时间戳和歌词对应起来，并且生成一句歌词，加入到歌词列表中
            Lyric lyric = new Lyric();
            for (int j = 0; j < timeLongs.length; j++) {

                if (timeLongs[j] != 0) {
                    lyric.setContent(content);//设置歌词内容
                    lyric.setTimePoint(timeLongs[j]);//设置时间戳
                    //把每句歌词放入集合中
                    lyrics.add(lyric);
                    lyric = new Lyric();

                    //sleepTime 还没有设置

                }


            }

            return content;
        }

        return "";
    }

    /**
     * 把把02:04.12转换成-->long类型
     *
     * @param line 02:04.12
     * @return
     */
    private long string2Long(String line) {
        long result = -1;
        try {
            //1.把02:04.12按照 “：”切割成 02和04.12
            String[] s1 = line.split(":");//
            //2.把04.12按照“.”切割成04和12
            String[] s2 = s1[1].split("\\.");

            //分
            long min = Long.parseLong(s1[0]);//2

            //秒
            long second = Long.parseLong(s2[0]);

            //毫秒
            long mil = Long.parseLong(s2[1]);

            result = min * 60 * 1000 + second * 1000 + mil * 10;
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }


        return result;
    }

    /**
     * 判断有多少句歌词
     *
     * @param line [02:04.12][03:37.32][00:59.73]我在这里欢笑
     * @return
     */
    private int getCont(String line) {
        int result = 0;
        String[] left = line.split("\\[");
        String[] right = line.split("\\]");
        if (left.length == 0 && right.length == 0) {
            result = 1;
        } else if (left.length > right.length) {
            result = left.length;
        } else {
            result = right.length;
        }
        return result;
    }
}
